#!/usr/bin/env ruby

require 'thor'
require 'pinport'

class Cli < Thor
  include Thor::Actions
  package_name "Pinport"

  # Imports a file contaning pins into the database
  desc "import FILE", "Imports pins from FILE"
  method_option :table, :default => nil, :aliases =>  '-t'
  method_option :column, :default => nil, :aliases => '-c'
  method_option :filter, :default => nil, :aliases => '-f'
  method_option :fix_newlines, :type => :boolean, :default => true, :aliases => '-newlines'
  method_option :config_file, :default => 'config.yml', :aliases => '-config'
  def import(file)
    table = options[:table]
    column = options[:column]
    filter = options[:filter]
    fix_newlines = options[:fix_newlines]
    config_file = options[:config_file]

    begin
      test = File.open(file)
    rescue => e
      puts e.message
      exit 1
    end

    begin
      check_config config_file
    rescue => e
      puts e.message
    else
      # Otherwise... attempt to import pins from FILE into database
      puts "Attempting import using following settings:"
      puts "PINs source: #{file}"
      puts "Target Database: #{Pinport.database_name}"
      puts "Table: #{Pinport.table_name}"
      puts "Column: #{Pinport.column_name}"
      if yes? "Continue with import?"
        Pinport.import_file(file, table, column, filter, fix_newlines)
        say "pinport import complete.", :green
      else
        say "Import cancelled.", :red
        exit 1
      end
    end
  end

  # Imports a folder of files containing pins into the database
  desc "import_folder FOLDER", "Imports pins from files in a FOLDER"
  method_option :extension, :default => 'txt', :aliases => '-ext'
  method_option :table, :default => nil, :aliases =>  '-t'
  method_option :column, :default => nil, :aliases => '-c'
  method_option :filter, :default => nil, :aliases => '-f'
  method_option :fix_newlines, :type => :boolean, :default => true, :aliases => '-newlines'
  method_option :config_file, :default => 'config.yml', :aliases => '-config'
  def import_folder(folder)
    extension = options[:extension]
    table = options[:table]
    column = options[:column]
    filter = options[:filter]
    fix_newlines = options[:fix_newlines]
    config_file = options[:config_file]

    begin
      check_config config_file
    rescue => e
      puts e.message
    else
      # Otherwise... attempt to import pins from FILE into database
      puts "Attempting import using following settings:"
      file_targets = Dir.glob("#{folder}/*.#{extension}")
      puts "Found: #{file_targets.count} .#{extension} files in #{folder}:"
      file_targets.each do |f|
        puts "  #{f}"
      end
      puts "Target:"
      puts "  Database: #{Pinport.database_name}"
      puts "  Table: #{Pinport.table_name}"
      puts "  Column: #{Pinport.column_name}"

      if yes? "Continue with import?"
        Pinport.import_folder(folder, extension, table, column, filter, fix_newlines)
        say "pinport import_folder complete.", :green
      else
        say "Import cancelled.", :red
        exit 1
      end
    end
  end

  # Generates a base config file
  desc "generate", "Generates a base config.yml file in the current directory"
  method_option :output, :default => 'config.yml', :aliases => '-o'
  def generate(output='config.yml')
    output = "#{Dir.pwd}/#{options[:output]}"
    say "Generating a config file in: #{output}"
    Pinport::Generator.generate_config(output)
    say "pinport generate complete.", :green
  end

  # Verifies if the supplied config file is valid
  desc "check_config CONFIG_FILE", "Checks pinport's configuration and initializes it", :hide => true
  def check_config(config_file)
    # Prompts user to generate a default config.yml file if it doesn't exist
    if !File.exists?("#{Dir.pwd}/config.yml")
      if yes? "No config file found in current directory, generate one?"
        # invoke generate with default parameters
        invoke :generate, ["config.yml"]
      else
        raise "Config file not found."
      end
    end

    # Prompts user to use the default config file
    if config_file.empty?
      if yes? "Config file not specified, use default config.yml?"
        config_file = 'config.yml'
      else
        raise "No config file specified used."
      end
    end

    # Convert config file path to be absolute
    config_file = File.absolute_path(config_file)

    # Attempt to initialize the module
    begin
      # Check if module can successfully use the supplied config_file
      Pinport.initialize(config_file)
    rescue => e
      puts e.message
      say "Unable to use #{config_file} to configure Pinport.", :red
      say "Verify that it is a valid YAML file, or try running 'pinport generate' to create a new config file.", :red
    end
  end
end

Cli.start(ARGV)